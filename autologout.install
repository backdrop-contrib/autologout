<?php
/**
 * @file
 * Auto logout install file.
 */

 /**
  * Implements hook_schema().
  */
 function autologout_schema() {
   $schema['autologout_user_settings'] = array(
     'description' => 'Maps users to autologout settings.',
     'fields' => array(
       'uid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
         'description' => 'Primary Key: {users}.uid for user.',
       ),
       'padding' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'default' => 0,
         'description' => 'Padding: Amount of time to give a user to respond to the logout dialog before ending their session.',
       ),
       'timeout' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'default' => 0,
         'description' => 'Timeout: The length of inactivity time before automated log out.',
       ),
     ),
     'primary key' => array('uid'),
     'foreign keys' => array(
       'user' => array(
         'table' => 'users',
         'columns' => array('uid' => 'uid'),
       ),
     ),
   );

   return $schema;
 }

/**
 * Gets a list of registered users.
 */
function _autologout_user_names(){
  $result = db_select('users','u')
    ->fields('u', array('uid', 'name'))
    ->condition('uid',0,'>')
    ->execute();

  $users = $result->fetchAllAssoc('uid', PDO::FETCH_ASSOC);
  return $users;
}

/**
 * Implements hook_install().
 */
function autologout_install() {
  // Set autologout default timeout and padding values for each user.
  $users = _autologout_user_names();
  $insert = db_insert('autologout_user_settings')->fields(array('uid', 'padding', 'timeout'));
  $timeout = config_get('autologout.settings', 'autologout_timeout');
  foreach ($users as $uid => $user) {
    if ($uid == 1) {
      $timeout = config_get('autologout.settings', 'autologout_role.administrator.timeout');
    }
    $insert->values(array(
      'uid' => $uid,
      'padding' => 10,
      'timeout' => $timeout,
    ));
  }
  $insert->execute();

  // default settings for each role

  $roles = user_roles(TRUE);
  foreach ($roles as $rid => $role) {
	  config_set('autologout.settings','autologout_role.' . $rid . '.active', 0);
	  config_set('autologout.settings','autologout_role.' . $rid . '.timeout', 1800);
  }
}

/**
 * Move autologout settings from variables to config.
 */
function autologout_update_1000(){
  $config = config('autologout.settings');
  $config->set('autologout_timeout', update_variable_get('autologout_timeout', 1800));
  $config->set('jstimer_js_load_option', update_variable_get('jstimer_js_load_option', 0));
  $config->set('autologout_max_timeout', update_variable_get('autologout_max_timeout', 172800));
  $config->set('autologout_padding', update_variable_get('autologout_padding', 10));
  $config->set('autologout_redirect_url', update_variable_get('autologout_redirect_url','user/login'));
  $config->set('autologout_no_dialog', update_variable_get('autologout_no_dialog',FALSE));
  $config->set('autologout_use_alt_logout_method', update_variable_get('autologout_use_alt_logout_method', FALSE));
  $config->set('autologout_message', update_variable_get('autologout_message', 'Your session is about to expire. Do you want to reset it?'));
  $config->set('autologout_inactivity_message', update_variable_get('autologout_inactivity_message', 'You have been logged out due to inactivity.'));
  $config->set('autologout_use_watchdog', update_variable_get('autologout_use_watchdog', ''));
  $config->set('autologout_enforce_admin', update_variable_get('autologout_enforce_admin',FALSE));
  $config->set('autologout_jstimer_format', update_variable_get('autologout_jstimer_format', '%hours%:%mins%:%secs%'));
  $config->set('autologout_enabled', update_variable_get('autologout_enabled', ''));
	$config->set('autologout_role_logout', update_variable_get('autologout_role_logout', FALSE));
  $config->save();

	// settings for each role
	$roles = user_roles(TRUE);
  foreach ($roles as $rid => $role) {
	  config_set('autologout.settings','autologout_role.' . $rid . '.active', update_variable_get('autologout_role_' . $rid,  ''));
	  config_set('autologout.settings','autologout_role.' . $rid . '.timeout', update_variable_get('autologout_role_' . $rid . '_timeout', 1800));
		update_variable_del('autologout_role_' . $rid);
		update_variable_del('autologout_role_' . $rid . '_timeout');
  }

  // re-use any previous values for each user's padding
  $users = _autologout_user_names();
	foreach ($users as $uid => $name) {
	  if (update_variable_get('autologout_user_' . $uid)){
	    config_set('autologout.settings','autologout_user.' . $uid . '.padding', update_variable_get('autologout_user_' . $uid, 10));
		  update_variable_del('autologout_role_' . $uid);
		}
  }

  // Delete variables.
  update_variable_del('autologout_no_dialog');
  update_variable_del('autologout_use_alt_logout_method');
  update_variable_del('autologout_max_timeout');
  update_variable_del('autologout_padding');
  update_variable_del('autologout_redirect_url');
  update_variable_del('autologout_timeout');
  update_variable_del('jstimer_js_load_option');
  update_variable_del('autologout_message');
  update_variable_del('autologout_inactivity_message');
  update_variable_del('autologout_use_watchdog');
  update_variable_del('autologout_enforce_admin');
  update_variable_del('autologout_jstimer_format');
  update_variable_del('autologout_role_logout');
  update_variable_del('autologout_enabled');
  update_variable_del('autologout_user_');
}

/**
 * Implements hook_update_last_removed().
 */
function autologout_update_last_removed() {
  return 7401;
}

/**
 * Migrate from config to a new autologout_user_settings table.
 */
function autologout_update_1001() {
  $schema = autologout_schema();
  if (!db_table_exists('autologout_user_settings')) {
    db_create_table('autologout_user_settings', $schema['autologout_user_settings']);
  }
  $config = config('autologout.settings');
  $users = _autologout_user_names();
  $insert = db_insert('autologout_user_settings')->fields(array('uid', 'padding', 'timeout'));
  foreach ($users as $uid => $user) {
    // Check if user exists.
    $user_settings = db_select('autologout_user_settings', 'au')
      ->fields('au', array('uid'))
      ->condition('uid', $user->uid)
      ->execute()
      ->fetchAssoc();
    if (!empty($user_settings['uid'])) {
      continue;
    }
    // Insert if user record doesn't yet exist.
    $padding = config_get('autologout.settings', 'autologout_user.' . $uid . '.padding');
    $timeout = config_get('autologout.settings', 'autologout_user.' . $uid . '.timeout');
    $insert->values(array(
      'uid' => $uid,
      'padding' => $padding ? $padding : 10,
      'timeout' => $timeout ? $timeout : 1800,
    ));
  }
  $insert->execute();
  $config->clear('autologout_user');
  $config->save();
}
